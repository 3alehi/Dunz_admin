// src/index.tsx
import {
  autoUpdate as floatingUiAutoUpdate,
  flip,
  shift,
  useFloating
} from "@floating-ui/react-dom";
import { Calendar } from "@kasraghoreyshi/calendar";
import { useClickOutside } from "@mantine/hooks";
import { format } from "date-fns-jalali";
import { convertDigits } from "persian-helpers";
import { useEffect, useState } from "react";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var DatePicker = ({
  autoUpdate,
  calendarProps,
  onChange,
  defaultDate,
  dateFormat = "yyyy/MM/dd",
  date: controlledDate,
  persianDigits,
  ...props
}) => {
  const { x, y, reference, floating, strategy } = useFloating({
    placement: "bottom-end",
    strategy: "absolute",
    middleware: [flip(), shift({ crossAxis: true })],
    whileElementsMounted: floatingUiAutoUpdate
  });
  const [date, setDate] = useState(defaultDate || controlledDate);
  const [isOpen, setIsOpen] = useState(false);
  const [inputRef, setInputRef] = useState(null);
  const [calendarRef, setCalendarRef] = useState(null);
  useClickOutside(() => setIsOpen(false), null, [calendarRef, inputRef]);
  const updateDateHandler = (newDate) => {
    if (!controlledDate)
      setDate(newDate);
    onChange == null ? void 0 : onChange(newDate);
  };
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => setIsMounted(true), []);
  useEffect(() => {
    if (!isMounted)
      return;
    setDate(controlledDate);
  }, [controlledDate]);
  return /* @__PURE__ */ jsxs(Fragment, {
    children: [
      /* @__PURE__ */ jsx("div", {
        ref: setInputRef,
        children: /* @__PURE__ */ jsx("input", {
          ref: reference,
          className: "p-2 rounded-md border border-gray-300",
          value: date ? convertDigits(format(date, dateFormat), {
            to: persianDigits ? "fa" : "en"
          }) : "",
          readOnly: true,
          onClick: (event) => {
            var _a;
            setIsOpen(
              (previousIsOpen) => previousIsOpen === false ? true : previousIsOpen
            );
            (_a = props.onClick) == null ? void 0 : _a.call(props, event);
          },
          ...props
        })
      }),
      isOpen && /* @__PURE__ */ jsx(Calendar, {
        activeDate: date,
        onChange: (newDate) => autoUpdate && updateDateHandler(newDate),
        ref: (el) => {
          floating(el);
          setCalendarRef(el);
        },
        style: {
          position: strategy,
          top: y ?? 0,
          left: x ?? 0
        },
        showFooter: true,
        onConfirm: (newDate) => {
          updateDateHandler(newDate);
          setIsOpen(false);
        },
        onCancel: () => setIsOpen(false),
        ...calendarProps
      })
    ]
  });
};
export {
  DatePicker
};
